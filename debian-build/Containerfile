ARG DEBIAN_VERSION=bookworm
FROM docker.io/library/buildpack-deps:${DEBIAN_VERSION} as build-base

ARG DEBIAN_VERSION
ARG GO_VERSION=1.24.1
ARG LLVM_VERSION=19
ARG BITBAKE_VERSION=2.8.7
ARG UPX_VERSION=4.2.4

ENV DEBIAN_FRONTEND=noninteractive

RUN set -eu; \
    apt-get update -q; \
    apt-get install -qy --no-install-recommends \
        bison \
        cmake \
        flex \
        locales \
        meson \
        nasm \
        ninja-build \
        rclone \
        sudo \
        texinfo \
        vim-tiny \
        xxd \
        yasm \
        # Debian packaging
        devscripts \
        dpkg-dev \
        equivs \
        fakeroot \
        lintian \
        quilt \
    ; \
    rm -rf /var/lib/apt/lists/*; \
    echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && locale-gen
ENV LANG=en_US.UTF-8
ENV EDITOR=vim.tiny

## Go
# https://go.dev/dl/

WORKDIR /usr/local/go
RUN set -eu; \
    wget -qO- "https://go.dev/dl/go${GO_VERSION}.linux-$(dpkg --print-architecture).tar.gz" \
        | tar -xzf- --strip 1
ENV PATH=/usr/local/go/bin:$PATH

## bitbake
# http://git.openembedded.org/bitbake/

WORKDIR /bitbake
RUN set -eu; \
    wget -qO- https://git.openembedded.org/bitbake/snapshot/bitbake-${BITBAKE_VERSION}.tar.gz \
        | tar -xzf- --strip 1
ENV PATH=/bitbake/bin:$PATH

## LLVM
# https://apt.llvm.org/

RUN set -eu; \
    wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key|tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc ; \
    echo "deb http://apt.llvm.org/${DEBIAN_VERSION}/ llvm-toolchain-${DEBIAN_VERSION}-${LLVM_VERSION} main" \
        > /etc/apt/sources.list.d/llvm.list ; \
    apt-get update -q && apt-get install -qy --no-install-recommends \
        clang-"${LLVM_VERSION}*" \
        lld-"${LLVM_VERSION}*" \
    ; \
    update-alternatives --install /usr/local/bin/clang clang /usr/bin/clang-${LLVM_VERSION} 100 ; \
    update-alternatives --install /usr/local/bin/clang++ clang++ /usr/bin/clang++-${LLVM_VERSION} 100 ;

## UPX
# https://upx.github.io/

RUN set -eu; \
    wget -qO- https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-amd64_linux.tar.xz \
        | tar -xJf- --strip 1 --wildcards -C /usr/local/bin/ "*/upx"

COPY entrypoint.sh /
ENTRYPOINT ["/entrypoint.sh"]

VOLUME /work
VOLUME /packages

WORKDIR /work

## Unprivileged user

ARG UID=1000
ARG GID=1000
RUN set -eu; \
    groupadd -g "${GID}" builder ; \
    useradd -g builder -u "${UID}" -m -s /bin/bash builder ; \
    echo 'PS1="\W> "' >> /home/builder/.bashrc ; \
    echo 'builder ALL=(ALL) NOPASSWD:/usr/bin/apt-get' >> /etc/sudoers ; \
    # allow preserving PATH in entrypoint
    sed -ie '/secure_path\|env_reset/d' /etc/sudoers ;

COPY --chown=builder quiltrc /home/builder/.quiltrc
COPY devscripts.conf /etc/

ENV BB_ENV_PASSTHROUGH_ADDITIONS="$BB_ENV_PASSTHROUGH_ADDITIONS APT"
ENV APT="sudo apt-get"
